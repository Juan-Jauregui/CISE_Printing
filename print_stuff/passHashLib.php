<?php
/* So it turns out UF's CISE department is running PHP 5.2.9 (wtf?!) so I have
 * to implement my own password hashing like some sort of savage.
 *
 * Super basic and not very modular or customizable, but it's secure (enough).
 *
 * Probably.
 */

/* Define some constants used for salt generation and hashing */
define("SALT_LENGTH",16);
define("HASHING_ALGO","whirlpool");

/* Hashes a given password using the whirlpool hashing algorithm and a random
 * 16-character salt. Returns it as a string in the format %salt%hash.
 */
function hash_password($password){
	$salt = getSalt(SALT_LENGTH);
	$salted_pw = $password.$salt;
	$hash = hash(HASHING_ALGO,$salted_pw);
	return "%".$salt."%".$hash;
}

/* Checks a hashed password (presumably) generated by hash_password(), in the
 * format %salt%hash. Returns true/false
 */
function check_password($password, $test_hash){
	/* Extract the salt from the given hash */
	$salt = substr($test_hash,1,SALT_LENGTH);
	$salted_pw = $password.$salt;
	$hashed_input = hash(HASHING_ALGO,$salted_pw);
	return ($test_hash === "%".$salt."%".$hashed_input);

}

/* Generates a salt of the given length */
function getSalt($length) {
     $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
     $salt = "";

     while(strlen($salt) < $length) {
         $randChar = substr(str_shuffle($chars), mt_rand(0, strlen($chars)), 1);
         $salt .= $randChar;
     }

     return $salt;
}

?>
